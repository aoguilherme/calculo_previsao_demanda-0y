// Cliente Supabase alternativo para ambientes com restri√ß√µes de rede
import { createClient as createSupabaseClient } from '@supabase/supabase-js'

// Configura√ß√£o simplificada para ambientes restritivos
export function createFallbackClient() {
  console.log('üîß Criando cliente Supabase com configura√ß√£o simplificada...')
  
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!
  
  if (!supabaseUrl || !supabaseServiceKey) {
    throw new Error('‚ùå Credenciais do Supabase n√£o encontradas. Verifique as vari√°veis de ambiente NEXT_PUBLIC_SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY')
  }
  
  console.log('üîç URL:', supabaseUrl)
  console.log('üîë Service Key configurada')
  
  try {
    // Cliente mais simples sem configura√ß√µes avan√ßadas
    const client = createSupabaseClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false,
        detectSessionInUrl: false
      },
      // Configura√ß√µes m√≠nimas para m√°xima compatibilidade
      global: {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Connection': 'keep-alive'
        },
        // Usar fetch nativo sem customiza√ß√µes para m√°xima compatibilidade
        fetch: fetch
      },
      // Configura√ß√µes de rede mais conservadoras
      db: {
        schema: 'public'
      },
      realtime: {
        params: {
          eventsPerSecond: 10
        }
      }
    })
    
    console.log('‚úÖ Cliente fallback criado com sucesso')
    return client
  } catch (error) {
    console.error('‚ùå Erro ao criar cliente fallback:', error)
    throw new Error(`Falha ao criar cliente Supabase: ${error instanceof Error ? error.message : 'Erro desconhecido'}`)
  }
}

// Fun√ß√£o de teste de conectividade b√°sica com diagn√≥sticos avan√ßados
export async function testConnection() {
  console.log('üîç Testando conectividade b√°sica...')
  
  try {
    const client = createFallbackClient()
    
    // Primeiro teste: verificar se conseguimos fazer uma consulta simples
    console.log('üìä Teste 1: Verificando acesso √† tabela previsoes_demanda...')
    const { data, error } = await client
      .from('previsoes_demanda')
      .select('count', { count: 'exact', head: true })
    
    if (error) {
      console.error('‚ùå Erro no teste de tabela:', error)
      
      // Teste alternativo: verificar conectividade b√°sica com uma consulta mais simples
      console.log('üîÑ Teste 2: Tentando consulta alternativa...')
      try {
        const { data: altData, error: altError } = await client
          .from('previsoes_demanda')
          .select('*')
          .limit(1)
        
        if (altError) {
          console.error('‚ùå Erro no teste alternativo:', altError)
          return { 
            success: false, 
            error: `Falha em ambos os testes. Erro principal: ${error.message}. Erro alternativo: ${altError.message}`,
            details: {
              primaryError: error,
              alternativeError: altError
            }
          }
        }
        
        console.log('‚úÖ Teste alternativo bem-sucedido')
        return { success: true, count: altData?.length || 0, method: 'alternative' }
      } catch (altCatchError: any) {
        console.error('‚ùå Erro cr√≠tico no teste alternativo:', altCatchError)
        return { 
          success: false, 
          error: `Falha cr√≠tica na conectividade: ${altCatchError.message}`,
          details: {
            primaryError: error,
            criticalError: altCatchError
          }
        }
      }
    }
    
    console.log('‚úÖ Teste de conectividade bem-sucedido')
    return { success: true, count: data || 0, method: 'primary' }
  } catch (error: any) {
    console.error('‚ùå Erro durante cria√ß√£o do cliente ou teste:', error)
    
    // Fornecer diagn√≥stico espec√≠fico baseado no tipo de erro
    let diagnosticMessage = error.message
    
    if (error.message.includes('fetch failed')) {
      diagnosticMessage = 'Erro de rede: N√£o foi poss√≠vel conectar ao Supabase. Verifique sua conex√£o de internet e configura√ß√µes de firewall.'
    } else if (error.message.includes('timeout')) {
      diagnosticMessage = 'Timeout: A conex√£o demorou muito para responder. Tente novamente em alguns momentos.'
    } else if (error.message.includes('ENOTFOUND')) {
      diagnosticMessage = 'Erro de DNS: N√£o foi poss√≠vel resolver o endere√ßo do Supabase. Verifique sua conex√£o de internet.'
    } else if (error.message.includes('ECONNREFUSED')) {
      diagnosticMessage = 'Conex√£o recusada: O servidor Supabase n√£o est√° aceitando conex√µes. Verifique se o servi√ßo est√° dispon√≠vel.'
    } else if (error.message.includes('Credenciais')) {
      diagnosticMessage = error.message // J√° √© uma mensagem espec√≠fica sobre credenciais
    }
    
    return { 
      success: false, 
      error: diagnosticMessage,
      originalError: error.message,
      timestamp: new Date().toISOString()
    }
  }
}