'use server'

import { createClient } from '@/lib/supabase/server'
import { createFallbackClient, testConnection } from '@/lib/supabase/fallback-client'
import { testBasicConnection, clearTableBasic } from '@/lib/supabase/basic-client'
import { PostgrestError } from '@supabase/supabase-js'

export async function clearPrevisoesDemanda() {
  console.log('üóëÔ∏è Iniciando exclus√£o de todos os dados da tabela previsoes_demanda...')
  
  try {
    // Verificar vari√°veis de ambiente antes de criar o cliente
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY
    
    console.log('üîç Verificando configura√ß√£o:')
    console.log('- NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? 'Definida' : '‚ùå N√ÉO DEFINIDA')
    console.log('- SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? 'Definida' : '‚ùå N√ÉO DEFINIDA')
    console.log('- URL completa:', supabaseUrl)
    console.log('- Service Key (primeiros 20 chars):', supabaseServiceKey?.substring(0, 20) + '...')
    
    if (!supabaseUrl || !supabaseServiceKey) {
      const missingVars = []
      if (!supabaseUrl) missingVars.push('NEXT_PUBLIC_SUPABASE_URL')
      if (!supabaseServiceKey) missingVars.push('SUPABASE_SERVICE_ROLE_KEY')
      
      return { 
        success: false, 
        error: `Vari√°veis de ambiente n√£o configuradas: ${missingVars.join(', ')}. Crie um arquivo .env.local com suas credenciais do Supabase.` 
      }
    }
    
    let supabase
    let usingFallback = false
    
    try {
      console.log('üîß Tentando cliente Supabase principal...')
      supabase = createClient()
      
      // Teste r√°pido de conectividade
      const { data: testData, error: testError } = await supabase
        .from('previsoes_demanda')
        .select('count', { count: 'exact', head: true })
      
      if (testError) {
        throw new Error(`Cliente principal falhou: ${testError.message}`)
      }
      
      console.log('‚úÖ Cliente principal funcionando')
      console.log('üìä Registros na tabela:', testData || 0)
    } catch (error) {
      console.log('‚ö†Ô∏è Cliente principal falhou, tentando cliente fallback...')
      console.error('Erro do cliente principal:', error)
      
      try {
        // Tentar cliente fallback com diagn√≥sticos detalhados
        console.log('üîç Executando teste de conectividade detalhado...')
        const connectionTest = await testConnection()
        
        if (!connectionTest.success) {
          console.error('‚ùå Teste de conectividade falhou:', connectionTest)
          
          // Fornecer diagn√≥stico espec√≠fico baseado no erro
          let errorMessage = connectionTest.error
          if (connectionTest.originalError) {
            if (connectionTest.originalError.includes('fetch failed')) {
              errorMessage = `‚ùå Erro de rede cr√≠tico: N√£o foi poss√≠vel conectar ao Supabase.\n\nüîç Poss√≠veis causas:\n‚Ä¢ Conex√£o de internet inst√°vel ou indispon√≠vel\n‚Ä¢ Firewall ou proxy bloqueando a conex√£o\n‚Ä¢ Servi√ßo Supabase temporariamente indispon√≠vel\n‚Ä¢ Configura√ß√µes de DNS incorretas\n\nüí° Solu√ß√µes:\n‚Ä¢ Verifique sua conex√£o de internet\n‚Ä¢ Tente desabilitar temporariamente firewall/antiv√≠rus\n‚Ä¢ Verifique se consegue acessar ${process.env.NEXT_PUBLIC_SUPABASE_URL} no navegador\n‚Ä¢ Aguarde alguns minutos e tente novamente\n\nDetalhes t√©cnicos: ${connectionTest.originalError}`
            } else if (connectionTest.originalError.includes('timeout')) {
              errorMessage = `‚è±Ô∏è Timeout de conex√£o: A conex√£o demorou muito para responder.\n\nüí° Solu√ß√µes:\n‚Ä¢ Verifique a estabilidade da sua conex√£o\n‚Ä¢ Tente novamente em alguns momentos\n‚Ä¢ Verifique se n√£o h√° sobrecarga na rede\n\nDetalhes: ${connectionTest.originalError}`
            }
          }
          
          return {
            success: false,
            error: errorMessage,
            timestamp: connectionTest.timestamp,
            diagnostics: {
              originalError: connectionTest.originalError,
              testDetails: connectionTest.details
            }
          }
        }
        
        console.log(`‚úÖ Teste de conectividade bem-sucedido (m√©todo: ${connectionTest.method})`)
        supabase = createFallbackClient()
        usingFallback = true
        console.log('‚úÖ Cliente fallback funcionando')
        console.log('üìä Registros na tabela:', connectionTest.count || 0)
      } catch (fallbackError) {
         console.error('‚ùå Cliente fallback tamb√©m falhou:', fallbackError)
         console.log('üîÑ Tentando m√©todo HTTP b√°sico como √∫ltima op√ß√£o...')
         
         try {
           // √öltima tentativa: HTTP b√°sico
           const basicTest = await testBasicConnection()
           
           if (!basicTest.success) {
             return {
               success: false,
               error: `Todos os m√©todos falharam. √öltimo erro: ${basicTest.error}`
             }
           }
           
           console.log('‚úÖ HTTP b√°sico funcionando, usando este m√©todo')
           
           // Usar m√©todo HTTP b√°sico para limpar a tabela
           const basicResult = await clearTableBasic()
           
           if (!basicResult.success) {
             return {
               success: false,
               error: `Erro no m√©todo HTTP b√°sico: ${basicResult.error}`
             }
           }
           
           return {
              success: true,
              message: `${basicResult.message} (m√©todo HTTP b√°sico)`
            }
            
          } catch (basicError) {
            console.error('‚ùå M√©todo HTTP b√°sico tamb√©m falhou:', basicError)
            return {
              success: false,
              error: `Erro de conectividade: Todos os m√©todos falharam. Verifique sua conex√£o com a internet, configura√ß√µes de firewall/proxy, ou se o projeto Supabase est√° ativo.`
            }
          }
        }
      }
     
     // Se chegou at√© aqui, significa que temos um cliente Supabase funcionando
     // Usar DELETE direto em vez da fun√ß√£o SQL problem√°tica
    console.log('üßπ Executando limpeza da tabela com DELETE...')
    const { error: deleteError } = await supabase
      .from('previsoes_demanda')
      .delete()
      .neq('id', 0) // Deleta todos os registros (condi√ß√£o sempre verdadeira)
    
    if (deleteError) {
      console.error('‚ùå Erro ao limpar tabela:', deleteError)
      return { 
        success: false, 
        error: `Erro ao limpar tabela: ${deleteError.message}` 
      }
    }
    
    console.log('‚úÖ Tabela limpa com sucesso!')
    
    // Verificar se a limpeza foi bem-sucedida
    const { data: finalCount, error: finalCountError } = await supabase
      .from('previsoes_demanda')
      .select('count', { count: 'exact', head: true })
    
    if (finalCountError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar o resultado final, mas a opera√ß√£o foi executada')
    } else {
      console.log('üìä Registros restantes na tabela:', finalCount || 0)
    }
    
    const clientType = usingFallback ? ' (usando cliente alternativo)' : ''
    return { 
      success: true, 
      message: `Tabela limpa com sucesso! Todos os registros foram removidos.${clientType}` 
    }
    
  } catch (error) {
    console.error('‚ùå Erro inesperado ao excluir dados:', error)
    return { 
      success: false, 
      error: `Erro inesperado: ${error instanceof Error ? error.message : 'Erro desconhecido'}` 
    }
  }
}